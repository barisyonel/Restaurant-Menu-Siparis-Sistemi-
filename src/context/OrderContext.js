"use client";

import { createContext, useState, useContext } from "react";

const OrderContext = createContext();

export const OrderProvider = ({ children }) => {
  const [orders, setOrders] = useState([]); // ðŸ“Œ KullanÄ±cÄ±nÄ±n sipariÅŸleri
  const [kitchenOrders, setKitchenOrders] = useState([]); // ðŸ“Œ Mutfakta bekleyen sipariÅŸler
  const [completedOrders, setCompletedOrders] = useState([]); // ðŸ“Œ Tamamlanan sipariÅŸler (GeÃ§miÅŸ SipariÅŸler)

  // âœ… SipariÅŸ ekleme fonksiyonu
  const addOrder = (item) => {
    setOrders((prevOrders) => [...prevOrders, item]);
  };

  // âœ… SipariÅŸi mutfaÄŸa gÃ¶nderme fonksiyonu
  const confirmOrder = () => {
    setKitchenOrders((prevKitchen) => [...prevKitchen, ...orders]); // ðŸ“Œ SipariÅŸleri mutfaÄŸa aktar
    setOrders([]); // ðŸ“Œ KullanÄ±cÄ±nÄ±n sipariÅŸ listesini sÄ±fÄ±rla
  };

  // âœ… Tek bir sipariÅŸi silme fonksiyonu
  const removeOrder = (index) => {
    setOrders((prevOrders) => prevOrders.filter((_, i) => i !== index));
  };

  // âœ… TÃ¼m sipariÅŸleri silme fonksiyonu (Sepeti BoÅŸalt)
  const clearOrders = () => {
    setOrders([]); // ðŸ“Œ TÃ¼m sipariÅŸleri temizle
  };

  // âœ… SipariÅŸi tamamlanmÄ±ÅŸ olarak iÅŸaretleme fonksiyonu (Mutfaktan kaldÄ±rÄ±p geÃ§miÅŸe ekler)
  const completeOrder = (index) => {
    setCompletedOrders((prevCompleted) => [...prevCompleted, kitchenOrders[index]]);
    setKitchenOrders((prevKitchen) => prevKitchen.filter((_, i) => i !== index));
  };

  return (
    <OrderContext.Provider value={{ 
      orders, 
      kitchenOrders, 
      completedOrders, 
      addOrder, 
      confirmOrder, 
      removeOrder, 
      clearOrders, 
      completeOrder 
    }}>
      {children}
    </OrderContext.Provider>
  );
};

export const useOrder = () => useContext(OrderContext);
